---
description: 
globs: 
alwaysApply: true
---
 # BambiLand Development Workflow

This rule governs the development workflow for the BambiLand project. It should be applied whenever:

1. Planning or implementing new features
2. Working on tasks from the task board
3. Following or updating the project's development process
4. Making architectural decisions

## Understanding the Project Structure

The BambiLand project follows a specific structure:

```
bambiland/
├── .ai/                # AI-assisted development docs
│   ├── prd/            # Product Requirements Documents
│   ├── architecture/   # Architecture documents
│   ├── stories/        # User stories
│   └── tasks/          # Development tasks
├── src/                # Application source code
│   ├── components/     # React components
│   ├── context/        # React contexts
│   ├── hooks/          # Custom React hooks
│   ├── lib/            # Utility libraries
│   ├── pages/          # Next.js pages
│   ├── styles/         # Global styles
│   ├── types/          # TypeScript types
│   └── utils/          # Utility functions
└── supabase/           # Supabase configuration
    └── functions/      # Edge Functions
```

## Key Documentation

- **PRD**: Located at `.ai/prd/bambiland-prd.md`, contains the product requirements and specifications.
- **Architecture**: Located at `.ai/architecture/bambiland-architecture.md`, outlines the technical architecture.
- **User Stories**: Located in `.ai/stories/`, each file represents a user-focused feature.
- **Task Board**: Located at `.ai/tasks/task-board.md`, tracks all tasks and their current status.
- **Task Details**: Located in `.ai/tasks/`, each file contains detailed information about a specific task.

## Task Management Workflow

1. **Task Selection**:
   - Check the task board at `.ai/tasks/task-board.md`
   - Identify tasks in the "Ready" column
   - Select a task based on priority and dependencies

2. **Starting a Task**:
   - Move the task from "Ready" to "In Progress" in the task board
   - Review the task's details, acceptance criteria, and dependencies
   - Plan the implementation approach

3. **Implementation**:
   - Follow the task's structure plan
   - Implement the required components, pages, or features
   - Adhere to the project's coding standards and patterns
   - Regularly commit changes with descriptive commit messages

4. **Testing**:
   - Write unit tests for components and functions
   - Implement integration tests for complex features
   - Ensure all acceptance criteria are met
   - Verify the implementation against the user story

5. **Completion**:
   - Move the task from "In Progress" to "Review" in the task board
   - Create a pull request with a summary of changes
   - Address review feedback
   - After approval, move the task to "Done"

## Coding Standards

1. **TypeScript**:
   - Use TypeScript for all code
   - Define interfaces and types for all data structures
   - Avoid using `any` type
   - Utilize generics for reusable components

2. **React/Next.js**:
   - Use functional components with hooks
   - Implement proper error boundaries
   - Optimize components with `useMemo`, `useCallback`, and `memo` where appropriate
   - Follow Next.js best practices for routing and data fetching

3. **State Management**:
   - Use React Context for global state
   - Implement custom hooks for shared logic
   - Keep component state local when possible

4. **Styling**:
   - Use Tailwind CSS for styling
   - Follow the project's design system
   - Implement responsive designs for all components
   - Ensure accessibility standards are met

5. **API Integration**:
   - Use Supabase client for database operations
   - Implement proper error handling for API calls
   - Cache results when appropriate
   - Follow RESTful principles for API endpoints

## Git Workflow

1. **Branching Strategy**:
   - Main branch: `main` (production-ready code)
   - Development branch: `dev` (integration branch)
   - Feature branches: `feature/feature-name`
   - Bug fix branches: `fix/bug-name`

2. **Commit Messages**:
   - Use present tense, imperative style (e.g., "Add user authentication" not "Added user authentication")
   - Include the task ID in the commit message (e.g., "E1-S1-T1: Add registration form")
   - Keep messages concise but descriptive

3. **Pull Requests**:
   - Create a PR from your feature branch to `dev`
   - Include a summary of changes
   - Link to the relevant task
   - Request reviews from team members
   - Merge only after approval

## Deployment

1. **Environments**:
   - Development: Local environment
   - Staging: Vercel preview deployments
   - Production: Vercel production deployment

2. **Deployment Process**:
   - Automatic deployment to staging on PR creation
   - Manual promotion to production after testing
   - Database migrations run automatically

## Important Considerations

- Always check for existing components before creating new ones
- Reuse utility functions and hooks whenever possible
- Ensure proper error handling in all code
- Follow security best practices, especially for authentication and user data
- Optimize for performance and accessibility
- Document complex logic or unconventional approaches